name: CI/CD Pipeline for Frontend

on:
  workflow_dispatch:
  push:
    branches:
      - prod
      - uat
      - dev
    paths:
      - 'frontend/**'
      - 'infrastructure/terraform/frontend/**'

jobs:
  build-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Set Environment Variable
        run: |
          echo "REACT_APP_BACKEND_URL=https://group-3-backend-${{ github.ref_name }}.sctp-sandbox.com:5000" >> frontend/.env
          cat frontend/.env  # Print the .env file to verify its contents
          
      - name: Install dependencies
        run: npm install
        working-directory: frontend

      - name: Run tests
        run: npm test
        working-directory: frontend

      - name: Build frontend
        run: npm run build
        working-directory: frontend

      - name: Verify build directory
        run: ls -la build
        working-directory: frontend

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Deploy infrastructure
        run: |
          cd infrastructure/terraform/frontend
          terraform init
          terraform apply -auto-approve \
          -var="branch_name=${{ github.ref_name }}" \
          -var "route53_zone_id=${{ secrets.ROUTE53_ZONE_ID }}" \
          || terraform refresh \
          -var="branch_name=${{ github.ref_name }}" \
          -var "route53_zone_id=${{ secrets.ROUTE53_ZONE_ID }}"

      - name: Fetch CloudFront OAI IAM ARN
        id: fetch-oai-arn
        run: |
          oai_arn=$(terraform output -raw cloudfront_oai_iam_arn)
          echo "CLOUDFRONT_OAI_IAM_ARN=$oai_arn" >> $GITHUB_ENV
        working-directory: infrastructure/terraform/frontend

      - name: Sync S3 bucket
        run: |
          aws s3 sync build s3://group-3-frontend-${{ github.ref_name }} --delete
        working-directory: frontend

      - name: Set S3 Public Access Block
        run: |
          aws s3api put-public-access-block --bucket group-3-frontend-${{ github.ref_name }} --public-access-block-configuration '{
            "BlockPublicAcls": false,
            "IgnorePublicAcls": false,
            "BlockPublicPolicy": false,
            "RestrictPublicBuckets": false
          }'

      - name: Set S3 Bucket Policy
        run: |
          aws s3api put-bucket-policy --bucket group-3-frontend-${{ github.ref_name }} --policy '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::group-3-frontend-${{ github.ref_name }}/*"
              },
              {
                "Sid": "AllowCloudFrontAccess",
                "Effect": "Allow",
                "Principal": {
                  "AWS": "'"${{ env.CLOUDFRONT_OAI_IAM_ARN }}"'"
                },
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::group-3-frontend-${{ github.ref_name }}/*"
              }
            ]
          }'

      - name: Fetch CloudFront Distribution ID
        id: cloudfront
        run: |
          echo "::set-output name=distribution_id::$(terraform output -raw cloudfront_distribution_id)"
        working-directory: infrastructure/terraform/frontend

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ steps.cloudfront.outputs.distribution_id }} --paths "/*"
