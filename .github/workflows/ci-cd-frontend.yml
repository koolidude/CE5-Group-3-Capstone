name: CI/CD Pipeline for Frontend

on:
  workflow_dispatch:
  push:
    branches:
      - prod
      - uat
      - dev
      - feature-tarmizi
    paths:
      - 'frontend/**'
      - 'infrastructure/terraform/frontend/**'

jobs:
  
  code-unit-testing:
    runs-on: ubuntu-latest
    #needs: [build-frontend]
    steps:  
        - name: Checkout code
          uses: actions/checkout@v2
        - name: Set up Node.js
          uses: actions/setup-node@v2
          with:
           node-version: '14'
        - name: Install dependencies
          run: npm install
          working-directory: frontend
        - name: Run tests
          run: npm test
          working-directory: frontend
  code-vulnerability-scanning:
     runs-on: ubuntu-latest
     needs: [code-unit-testing]
     outputs:
      status: ${{ job.status }}
     steps:
        - name: Check out repository code
          uses: actions/checkout@v4.1.5
        - name: Install Snyk CLI
          run: npm install -g snyk
        - name: Run Snyk to check for vulnerabilities
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          run: | 
            cd frontend
            snyk test --severity-threshold=critical --skip-unresolved
            snyk test --severity-threshold=critical --json > snyk-results.json
        - name: Upload Snyk Scan Results
          uses: actions/upload-artifact@v4.3.0
          with:
            name: snyk-scan-results
            path: snyk-results.json
                
  iac-vulnerability-scanning:
    runs-on: ubuntu-latest
    needs: [code-unit-testing,code-vulnerability-scanning]
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.1.5
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Run Snyk Code Scan And Check Snyk Scan Results
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk iac test --severity-threshold=critical
          snyk iac test --severity-threshold=critical --json > snyk_iac_report.json
      - name: Upload Snyk IaC Report
        uses: actions/upload-artifact@v4.3.0
        with:
          name: snyk-iac-report
          path: snyk_iac_report.json            
  Deploying-Infrastructure-for-Frontend:
    runs-on: ubuntu-latest
    needs: [code-unit-testing,code-vulnerability-scanning,iac-vulnerability-scanning]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Environment Variable
        run: |
          echo "REACT_APP_BACKEND_URL=https://group-3-backend-${{ github.ref_name }}.sctp-sandbox.com:5000" >> frontend/.env
          cat frontend/.env  # Print the .env file to verify its contents

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy infrastructure
        run: |
          cd infrastructure/terraform/frontend
          terraform init
          terraform apply -auto-approve -var="branch_name=${{ github.ref_name }}" -var "route53_zone_id=${{ secrets.ROUTE53_ZONE_ID }}" \
          || terraform refresh -var="branch_name=${{ github.ref_name }}" -var "route53_zone_id=${{ secrets.ROUTE53_ZONE_ID }}"\

  Setting-up-S3-bucket:
   runs-on: ubuntu-latest 
   needs: [code-unit-testing,code-vulnerability-scanning,iac-vulnerability-scanning,Deploying-Infrastructure-for-Frontend]  
   steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-east-1
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
         node-version: '14'      

      - name: Install dependencies
        run: npm install
        working-directory: frontend

      - name: Build frontend
        run: npm run build
        working-directory: frontend

      - name: Verify build directory
        run: ls -la build
        working-directory: frontend
      - name: Sync S3 bucket
        run: aws s3 sync build s3://group-3-frontend-${{ github.ref_name }} --delete
        working-directory: frontend

      - name: Set S3 Public Access Block
        run: |
          aws s3api put-public-access-block --bucket group-3-frontend-${{ github.ref_name }} --public-access-block-configuration '{
            "BlockPublicAcls": false,
            "IgnorePublicAcls": false,
            "BlockPublicPolicy": false,
            "RestrictPublicBuckets": false
          }'

      - name: Set S3 Bucket Policy
        run: |
          aws s3api put-bucket-policy --bucket group-3-frontend-${{ github.ref_name }} --policy '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::group-3-frontend-${{ github.ref_name }}/*"
              }
            ]
          }'
  Setting-up-of-CloudFront:
    runs-on: ubuntu-latest
    needs: [code-unit-testing,code-vulnerability-scanning,iac-vulnerability-scanning,Deploying-Infrastructure-for-Frontend,Setting-up-S3-bucket]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Fetch CloudFront Distribution ID
        id: cloudfront
        run: echo "::set-output name=distribution_id::$(terraform output -raw cloudfront_distribution_id)"
        working-directory: infrastructure/terraform/frontend

      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --distribution-id ${{ steps.cloudfront.outputs.distribution_id }} --paths "/*"
