name: CI/CD Pipeline for Backend

on:
  workflow_dispatch:
  push:
    branches:
      - prod
      - uat
      - dev
    paths:
      - 'backend/**'
      - 'infrastructure/terraform/backend/**'

jobs:
  code-unit-testing:
    runs-on: ubuntu-latest
    # needs: [install-dependencies]
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
       
      - name: Installing Dependencies and Run unit testing command
        env:
           PYTHONPATH: ${{ github.workspace }}/backend  
        run: |
         python -m pip install --upgrade pip
         pip install -r backend/src/requirements.txt 
         python -m unittest discover -s backend/tests

  code-vulnerability-scanning:
    runs-on: ubuntu-latest
    needs: [code-unit-testing]
    outputs:
        status: ${{ job.status }}
    steps:
        - name: Check out repository code
          uses: actions/checkout@v4.1.5
        - name: Install Snyk CLI
          run: npm install -g snyk
        - name: Run Snyk to check for vulnerabilities
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          run: | 
           python -m pip install --upgrade pip
           pip install -r backend/src/requirements.txt  
           cd backend/src
            snyk test --severity-threshold=critical --skip-unresolved
            snyk test --severity-threshold=critical --json > snyk-results.json
        - name: Upload Snyk Scan Results
          uses: actions/upload-artifact@v4.3.0
          with:
            name: snyk-scan-results
            path: snyk-results.json
        
  iac-vulnerability-scanning:
    runs-on: ubuntu-latest
    needs: [code-unit-testing,code-vulnerability-scanning]
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.1.5
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Run Snyk Code Scan And Check Snyk Scan Results
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk iac test --severity-threshold=critical
          snyk iac test --severity-threshold=critical --json > snyk_iac_report.json
      - name: Upload Snyk IaC Report
        uses: actions/upload-artifact@v4.3.0
        with:
          name: snyk-iac-report
          path: snyk_iac_report.json      
  
  build-and-scan-image:
    runs-on: ubuntu-latest
    needs: [code-unit-testing, code-vulnerability-scanning, iac-vulnerability-scanning]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/src/requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Build Docker image
        run: |
          docker build -t netflix_clone_backend .
          docker tag netflix_clone_backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/group-3-ecr-repo-${{ github.ref_name }}:latest
        working-directory: backend
        
      - name: Run image scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'netflix_clone_backend:latest'
          format: 'table'
        # exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'MEDIUM,HIGH,CRITICAL'
          output: 'docker-image-scan.json'
      
      - name: Upload Docker Trivy Report
        uses: actions/upload-artifact@v4.3.0
        with:
          name: docker-image-scan
          path: docker-image-scan.json        
      
      - name: Create Terraform state S3 bucket if it does not exist
        run: |
          if ! aws s3api head-bucket --bucket group-3-terraform-state 2>/dev/null; then
            aws s3api create-bucket --bucket group-3-terraform-state --region us-east-1
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Deploy infrastructure
        run: |
          cd infrastructure/terraform/backend
          terraform init \
          -backend-config="bucket=group-3-terraform-state" \
          -backend-config="key=group-3-terraform-state/terraform.tfstate" \
          -backend-config="region=us-east-1"
          terraform apply -auto-approve -var="branch_name=${{ github.ref_name }}" \
          -var="tmdb_api_key=${{ secrets.TMDB_API_KEY }}" \
          -var="secret_key=${{ secrets.SECRET_KEY }}" \
          -var "route53_zone_id=${{ secrets.ROUTE53_ZONE_ID }}"

      - name: Build and push Docker image
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
          docker build -t netflix_clone_backend .
          docker tag netflix_clone_backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/group-3-ecr-repo-${{ github.ref_name }}:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/group-3-ecr-repo-${{ github.ref_name }}:latest
        working-directory: backend

      - name: Update ECS service
        run: |
          aws ecs update-service --cluster group-3-ecs-cluster-${{ github.ref_name }} --service group-3-ecs-service-${{ github.ref_name }} --force-new-deployment
